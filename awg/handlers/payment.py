import os
from typing import Optional
from service.notifier import notify_admins
from service.user_vpn_check import update_vpn_state
from service.vpn_service import create_vpn_config
import db
import uuid
import logging

from aiogram import Router, F
from aiogram.types import LabeledPrice, PreCheckoutQuery, Message
from aiogram.enums import ContentType
from aiogram.types import CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from service.generate_vpn_key import generate_vpn_key
from service.db_instance import user_db
from aiogram.types import Message, FSInputFile
from settings import BOT, YOOKASSA_PROVIDER_TOKEN, ACTIVE_PAYMENT_SYSTEMS, PAYMENT_PLANS


logger = logging.getLogger(__name__)
router = Router()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

def get_payment_systems_keyboard():
    buttons = []
    if "yookassa" in ACTIVE_PAYMENT_SYSTEMS:
        buttons.append(InlineKeyboardButton(text="üí≥ –ÆKassa", callback_data="pay_yookassa"))
    if "telegram_stars" in ACTIVE_PAYMENT_SYSTEMS:
        buttons.append(InlineKeyboardButton(text="‚≠ê Telegram Stars", callback_data="pay_telegram_stars"))
    return InlineKeyboardMarkup(inline_keyboard=[[b] for b in buttons])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

def get_plans_keyboard(system):
    plans = PAYMENT_PLANS[system]["plans"]
    buttons = [
        [InlineKeyboardButton(text=plan["label"], callback_data=f"plan_{system}_{plan['months']}")]
        for plan in plans
    ]
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_vpn")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(F.data == "buy_vpn")
async def buy_vpn(callback: CallbackQuery):
    if callback.message.text:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=get_payment_systems_keyboard(),
        )
    else:
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=get_payment_systems_keyboard(),
        )
    await callback.answer()


@router.callback_query(F.data.startswith("pay_"))
async def choose_payment_system(callback: CallbackQuery):
    system = callback.data.split("pay_")[1]
    if system not in ACTIVE_PAYMENT_SYSTEMS:
        await callback.answer("–≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
        return
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è {system.replace('_', ' ').title()}: ",
        reply_markup=get_plans_keyboard(system),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("plan_"))
async def handle_plan_choice(callback: CallbackQuery):
    _, system, months = callback.data.split("_", 2)
    months = int(months)
    plans = PAYMENT_PLANS[system]["plans"]
    plan = next((p for p in plans if p["months"] == months), None)
    if not plan:
        await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    if system == "yookassa":
        # –ÆKassa invoice
        amount = plan["price"] * 100
        await callback.message.bot.send_invoice(
            chat_id=callback.from_user.id,
            title=f"VPN –Ω–∞ {months} –º–µ—Å.",
            description="–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
            payload=f"yookassa-{callback.from_user.id}-{months}-{plan['price']}",
            provider_token=YOOKASSA_PROVIDER_TOKEN,
            currency="RUB",
            prices=[LabeledPrice(label="RUB", amount=amount)],
            start_parameter="vpn-subscription",
        )
        await callback.answer()
    elif system == "telegram_stars":
        # Telegram Stars invoice
        amount = plan["price"]
        await callback.message.bot.send_invoice(
            chat_id=callback.from_user.id,
            title=f"VPN –Ω–∞ {months} –º–µ—Å.",
            description="–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
            payload=f"telegram_stars-{callback.from_user.id}-{months}-{plan['price']}",
            provider_token="STARS",  # Telegram Stars magic token
            currency="STARS",
            prices=[LabeledPrice(label="STARS", amount=amount)],
            start_parameter="vpn-stars-subscription",
        )
        await callback.answer()
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", show_alert=True)


# üëâ Pre-checkout –æ–±—Ä–∞–±–æ—Ç–∫–∞
@router.pre_checkout_query()
async def pre_checkout(pre_checkout_query: PreCheckoutQuery):
    logger.info(f"üí≥ PreCheckout: {pre_checkout_query.id}")
    await pre_checkout_query.answer(ok=True)


async def process_successful_payment(
    user_id: str, raw_payload: str, provider_payment_charge_id: str
) -> Optional[int]:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        updated_payment = user_db.update_payment_status(
            raw_payload, provider_payment_charge_id, new_status="success"
        )
        if not updated_payment:
            return None

        user_db.update_user_end_date(user_id, months_to_add=updated_payment.months)
        return updated_payment.months
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        return None


def validate_payment(message: Message) -> Optional[tuple[str, str, str]]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    payment = message.successful_payment
    if payment is None or payment.invoice_payload is None or message.from_user is None:
        return None
    return (
        str(message.from_user.id),
        payment.invoice_payload,
        payment.provider_payment_charge_id,
    )


# üëâ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    try:
        result = validate_payment(message)
        if result is None:
            await message.answer("–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã")
            return
        telegram_id, payload, provider_payment_charge_id = result

        logger.info(f"üí∞ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ {payload}")

        months = await process_successful_payment(
            telegram_id, payload, provider_payment_charge_id
        )
        if months is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã.")
            return

        logger.info(f"üîÅ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {months} –º–µ—Å. –¥–ª—è {telegram_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–ª–∏ –Ω–µ—Ç
        clients = db.get_client_list()
        client_entry = next((c for c in clients if c[0] == str(telegram_id)), None)
        if client_entry is None:  # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–∑–¥–∞–µ–º
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –æ–Ω–∞ —É –Ω–∞—Å –≤ –ë–î
            config = user_db.get_config_by_telegram_id(str(telegram_id))
            if not config:
                await message.answer("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
                await create_vpn_config(telegram_id, message)
        else:
            await message.answer("üõ° –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.")
        update_vpn_state()
        await notify_admins(
            text=f"üîÅ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {months} –º–µ—Å. –¥–ª—è {telegram_id} \n {message.from_user.username} \n {payload}"
        )
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )
